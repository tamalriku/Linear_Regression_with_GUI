# -*- coding: utf-8 -*-
"""Linear Regression Prediction with GUI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18014zSUDxL821jAyf1NvmXQhcPDbpWBm
"""

import pandas as pd

from google.colab import files #Upload data file
uploaded = files.upload()

# Read Dataset

data = pd.read_csv("Salary_dataset.csv")
data.head()

#Scatter Plot of data

import matplotlib.pyplot as plt

plt.scatter(data['YearsExperience'], data['Salary'])
plt.show()

# Store feature value in x and target value in y

X = data[['YearsExperience']]
y = data['Salary']

# Training data/Test data Split

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Training the model using the train data

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

# Check model prediction on train set

model.score(X_train, y_train)

# Check model prediction on test set

model.score(X_test, y_test)

# Compareing Results

y_pred = model.predict(X_test)
y_pred

df = pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})
df

model.predict([[9]])

import joblib

joblib.dump(model, 'Linear_Regression')

model = joblib.load('Linear_Regression')

# GUI

X  = data[['YearsExperience']]
y= data['Salary']

model = LinearRegression()
model.fit(X,y)

import joblib
joblib.dump(model,'model_joblib')

model = joblib.load('model_joblib')

import ipywidgets as widgets
from IPython.display import display

# Create a text input widget for 'YearsExperience'
years_input = widgets.FloatText(
    value=0.0,
    description='Years of Experience:',
    disabled=False
)

# Create an output widget to display the prediction
output = widgets.Output()

# Create a button to trigger the prediction
predict_button = widgets.Button(
    description='Predict Salary'
)

# Define the prediction function
def on_predict_button_clicked(b):
    with output:
        output.clear_output()  # Clear previous output
        try:
            years = years_input.value
            # The model expects a 2D array-like input
            prediction = model.predict([[years]])
            print(f"Predicted Salary: {prediction[0]:,.2f}")
        except Exception as e:
            print(f"Error during prediction: {e}")

# Link the button click to the prediction function
predict_button.on_click(on_predict_button_clicked)

# Display the widgets
display(years_input, predict_button, output)
